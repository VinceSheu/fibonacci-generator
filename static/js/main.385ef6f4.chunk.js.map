{"version":3,"sources":["helpers/fibonacci-helper.js","components/FibonacciTable.js","App.js","serviceWorker.js","index.js"],"names":["generateFibonacciSequence","numbersRequested","returnArray","firstNumber","secondNumber","i","newSecondNumber","push","FibonacciTable","props","fibonacciArray","react_default","a","createElement","className","map","fibonacciNumber","index","App","state","value","error","loading","handleSubmit","_this","setState","Number","onChange","event","target","_this$state","this","inputValue","type","onClick","disabled","length","components_FibonacciTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAAaA,SAA4B,SAACC,GAExC,GAAyB,IAArBA,EACF,MAAO,CAAC,GACH,GAAyB,IAArBA,EACT,MAAO,CAAC,EAAG,GAQX,IALA,IAAIC,EAAc,CAAC,EAAG,GAClBC,EAAcD,EAAY,GAC1BE,EAAeF,EAAY,GAGtBG,EAAI,EAAGA,EAAIJ,EAAiB,EAAGI,IAAK,CAC3C,IAAIC,EAAkBH,EAAcC,EACpCF,EAAYK,KAAKD,GAEjBH,EAAcC,EACdA,EAAeE,EAEjB,OAAOJ,UCcIM,MA7Bf,SAAwBC,GAAO,IACrBC,EAAmBD,EAAnBC,eAER,OACEC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,KACAH,EAAAC,EAAAC,cAAA,oBAGJF,EAAAC,EAAAC,cAAA,aAEEH,EAAeK,IAAK,SAACC,EAAiBC,GAAlB,OAClBN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeG,GAC7BN,EAAAC,EAAAC,cAAA,UAAKG,SCuBFE,6MArCbC,MAAQ,CAAEC,MAAO,GAAIV,eAAgB,GAAIW,MAAO,KAAMC,SAAS,KAE/DC,aAAe,WACbC,EAAKC,SAAS,CAACf,eAAgB,GAAIY,SAAS,IAC5C,IAAMZ,EAAiBV,EAA0B0B,OAAOF,EAAKL,MAAMC,QACnEI,EAAKC,SAAS,CAACf,iBAAgBY,SAAS,OAG1CK,SAAW,SAACC,GACV,IAAMR,EAAQQ,EAAMC,OAAOT,MACvBC,EAAQ,KACRD,GAAS,IACXC,EAAQ,gDAEVG,EAAKC,SAAS,CAAEL,QAAOC,mFAGhB,IAAAS,EAC2CC,KAAKZ,MAA/CC,EADDU,EACCV,MAAOV,EADRoB,EACQpB,eAAgBY,EADxBQ,EACwBR,QAASD,EADjCS,EACiCT,MAClCW,EAAcZ,GAAmB,IAAVA,EAAmBA,EAAL,GAE3C,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,oFACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcmB,KAAK,SAASb,MAAOY,EAAYL,SAAUI,KAAKJ,WAC/EhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaoB,QAASH,KAAKR,aAAcY,SAAUb,GAAWD,GAAhF,YACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaO,GAC1BC,GAAWX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAC1BJ,EAAe0B,OAAS,GACxBzB,EAAAC,EAAAC,cAACwB,EAAD,CAAiB3B,eAAgBA,YAhCzB4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.385ef6f4.chunk.js","sourcesContent":["export const generateFibonacciSequence = (numbersRequested) => {\n  // base cases with the first 2 fibonacci numbers being defined as 0 and 1\n  if (numbersRequested === 1) {\n    return [0];\n  } else if (numbersRequested === 2) {\n    return [0, 1];\n  } else {\n    // in non-trivial cases we begin with the first 2 numbers already defined\n    let returnArray = [0, 1];\n    let firstNumber = returnArray[0];\n    let secondNumber = returnArray[1];\n    // since the first 2 numbers have already been defined, we exclude them \n    // from the remaining numbers to be generated \n    for (let i = 0; i < numbersRequested-2; i++) {\n      var newSecondNumber = firstNumber + secondNumber;\n      returnArray.push(newSecondNumber);\n      // update our numbers to continue our fibonnaci sequence generation\n      firstNumber = secondNumber;\n      secondNumber = newSecondNumber;\n    }\n    return returnArray;\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\n\nfunction FibonacciTable(props) {\n  const { fibonacciArray } = props;\n\n  return (\n    <table className=\"fib-table\">\n      <thead>\n        <tr>\n          <th className=\"left-column\">n</th>\n          <th>F(n)</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        fibonacciArray.map( (fibonacciNumber, index) => (\n          <tr> \n            <td className=\"left-column\">{index}</td>\n            <td>{fibonacciNumber}</td>\n          </tr>\n        ))\n      }\n      </tbody>\n    </table>\n  );\n}\n\nFibonacciTable.propTypes = {\n  fibonacciArray: PropTypes.array.isRequired,\n};\n\nexport default FibonacciTable;","import React, { Component } from 'react';\nimport './App.css';\nimport { generateFibonacciSequence } from './helpers/fibonacci-helper';\nimport FibonacchiTable from './components/FibonacciTable'; \n\nclass App extends Component {\n  // Initialize state\n  state = { value: '', fibonacciArray: [], error: null, loading: false };\n\n  handleSubmit = () => {\n    this.setState({fibonacciArray: [], loading: true})\n    const fibonacciArray = generateFibonacciSequence(Number(this.state.value));\n    this.setState({fibonacciArray, loading: false})\n  }\n\n  onChange = (event) => {\n    const value = event.target.value;\n    let error = null;\n    if (value <= 0) {\n      error = 'Please enter a non-negative, non-zero number';\n    } \n    this.setState({ value, error });\n  }\n\n  render() {\n    const { value, fibonacciArray, loading, error } = this.state;\n    const inputValue = !value && value !== 0 ? '' : value;\n\n    return (\n      <div className=\"App\">\n        <h1>Fibonacci Generator</h1>\n        <p>Please enter the number of fibonacci numbers you would like to generate</p>\n        <input className=\"input-field\" type=\"number\" value={inputValue} onChange={this.onChange} />\n        <button className=\"submit-btn\" onClick={this.handleSubmit} disabled={loading || error}> Submit </button>\n        <div className=\"error-msg\">{error}</div>\n        { loading && <div className=\"loader\"></div> }\n        { fibonacciArray.length > 0 &&\n          <FibonacchiTable fibonacciArray={fibonacciArray}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}